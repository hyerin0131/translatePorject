{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(translateSimple),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchTranslateSimple),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(translateSaga);\n\nimport { all, takeLatest, fork, put, delay } from 'redux-saga/effects';\nimport { TRANSLATE_SIMPLE_REQUEST, TRANSLATE_SIMPLE_SUCCESS, TRANSLATE_SIMPLE_FAILURE } from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction translateSimple(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function translateSimple$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(translateSimpleAPI, action.data);\n\n        case 2:\n          result = _context.sent;\n          _context.next = 5;\n          return delay(1000);\n\n        case 5:\n          _context.prev = 5;\n          console.log(\"done\");\n          _context.next = 9;\n          return put({\n            type: TRANSLATE_SIMPLE_SUCCESS,\n            data: \"번역 성공!!!\"\n          });\n\n        case 9:\n          _context.next = 16;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](5);\n          console.log(\"fails\");\n          _context.next = 16;\n          return put({\n            type: TRANSLATE_SIMPLE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[5, 11]]);\n}\n\nfunction watchTranslateSimple() {\n  return _regeneratorRuntime.wrap(function watchTranslateSimple$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function translateSaga() {\n  return _regeneratorRuntime.wrap(function translateSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchTranslateSimple)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/hyesong/Documents/react/react-bird/translatePorject/saga/translate.js"],"names":["translateSimple","watchTranslateSimple","translateSaga","all","takeLatest","fork","put","delay","TRANSLATE_SIMPLE_REQUEST","TRANSLATE_SIMPLE_SUCCESS","TRANSLATE_SIMPLE_FAILURE","translateSimpleAPI","data","axios","post","action","call","result","console","log","type","error","response"],"mappings":";;oDAUUA,e;qDA0BAC,oB;qDAKgBC,a;;AAvC1B,SAAQC,GAAR,EAAYC,UAAZ,EAAuBC,IAAvB,EAA6BC,GAA7B,EAAiCC,KAAjC,QAA6C,oBAA7C;AAEA,SAAQC,wBAAR,EAAiCC,wBAAjC,EAA0DC,wBAA1D,QAAyF,uBAAzF;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAiC;AAC7B,SAAOC,KAAK,CAACC,IAAN,CAAW,SAAX,EAAqBF,IAArB,CAAP;AACH;;AAED,SAAUZ,eAAV,CAA0Be,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMC,IAAI,CAACL,kBAAD,EAAqBI,MAAM,CAACH,IAA5B,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAAA;AAGI,iBAAMV,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAKQW,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AALR;AAMQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACX,wBADC;AAENG,YAAAA,IAAI,EAAC;AAFC,WAAD,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQM,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAbR;AAcQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAACV,wBADC;AAENW,YAAAA,KAAK,EAAC,YAAMC,QAAN,CAAeV;AAFf,WAAD,CAAT;;AAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BA,SAAUX,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,UAAU,CAACI,wBAAD,EAA0BR,eAA1B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAgB,SAAUE,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZ,iBAAMC,GAAG,CAAC,CAACE,IAAI,CAACJ,oBAAD,CAAL,CAAD,CAAT;;AAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\n\nimport {all,takeLatest,fork, put,delay} from 'redux-saga/effects';\n\nimport {TRANSLATE_SIMPLE_REQUEST,TRANSLATE_SIMPLE_SUCCESS,TRANSLATE_SIMPLE_FAILURE} from '../reducers/translate';\n\nfunction translateSimpleAPI(data){\n    return axios.post('/simple',data);\n}\n\nfunction* translateSimple(action){\n  \n    const result = yield call(translateSimpleAPI, action.data);\n    yield delay(1000);\n    try {\n        console.log(\"done\");\n        yield put({\n            type:TRANSLATE_SIMPLE_SUCCESS,\n            data:\"번역 성공!!!\"\n\n        });\n        \n    } catch (error) {\n        console.log(\"fails\");\n        yield put({\n            type:TRANSLATE_SIMPLE_FAILURE,\n            error:error.response.data,\n\n        });\n        \n    }\n\n}\n\n\n\nfunction* watchTranslateSimple(){\n    yield takeLatest(TRANSLATE_SIMPLE_REQUEST,translateSimple);\n}\n\n\nexport  default function* translateSaga(){\n\n    yield all([fork(watchTranslateSimple)])\n\n}"]},"metadata":{},"sourceType":"module"}