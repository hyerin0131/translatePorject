{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport { TRANSLATE_SIMPLE_REQUEST, TRANSLATE_SIMPLE_SUCCESS, TRANSLATE_SIMPLE_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE } from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction* translateSimple(action) {\n  // const result = yield call(translateSimpleAPI, action.data);\n  yield delay(100);\n\n  try {\n    console.log('done');\n    console.log(action.data);\n    yield put({\n      type: TRANSLATE_SIMPLE_SUCCESS,\n      Output: faker.lorem.paragraphs() + faker.lorem.paragraphs(),\n      Input: action.data,\n      id: faker.random.number()\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: TRANSLATE_SIMPLE_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchTranslateSimple() {\n  yield takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n}\n\nfunction loginAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.id);\n  yield delay(100);\n\n  try {\n    console.log('done');\n    console.log(action.id);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.id\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchlogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction logoutAPI(data) {\n  return axios.post('/logout', data);\n}\n\nfunction* logout(action) {\n  // const result = yield call(logoutAPI, action.id);\n  yield delay(100);\n\n  try {\n    console.log('done');\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchlogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nexport default function* translateSaga() {\n  console.log('watch Saga');\n  yield all([fork(watchTranslateSimple), fork(watchlogin), fork(watchlogout)]);\n}","map":{"version":3,"sources":["/Users/hyesong/Documents/react/react-bird/translatePorject/saga/translate.js"],"names":["all","takeLatest","fork","put","delay","call","faker","fake","TRANSLATE_SIMPLE_REQUEST","TRANSLATE_SIMPLE_SUCCESS","TRANSLATE_SIMPLE_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","translateSimpleAPI","data","axios","post","translateSimple","action","console","log","type","Output","lorem","paragraphs","Input","id","random","number","error","response","watchTranslateSimple","loginAPI","login","watchlogin","logoutAPI","logout","watchlogout","translateSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport {\n  TRANSLATE_SIMPLE_REQUEST,\n  TRANSLATE_SIMPLE_SUCCESS,\n  TRANSLATE_SIMPLE_FAILURE,\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n} from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction* translateSimple(action) {\n  // const result = yield call(translateSimpleAPI, action.data);\n  yield delay(100);\n  try {\n    console.log('done');\n    console.log(action.data);\n    yield put({\n      type: TRANSLATE_SIMPLE_SUCCESS,\n      Output: faker.lorem.paragraphs() + faker.lorem.paragraphs(),\n      Input: action.data,\n      id: faker.random.number(),\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: TRANSLATE_SIMPLE_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchTranslateSimple() {\n  yield takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n}\nfunction loginAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.id);\n  yield delay(100);\n  try {\n    console.log('done');\n    console.log(action.id);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.id,\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchlogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\nfunction logoutAPI(data) {\n  return axios.post('/logout', data);\n}\n\nfunction* logout(action) {\n  // const result = yield call(logoutAPI, action.id);\n  yield delay(100);\n  try {\n    console.log('done');\n    yield put({\n      type: LOGOUT_SUCCESS,\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchlogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nexport default function* translateSaga() {\n  console.log('watch Saga');\n  yield all([fork(watchTranslateSimple), fork(watchlogin), fork(watchlogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}