{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport { TRANSLATE_SIMPLE_REQUEST, TRANSLATE_SIMPLE_SUCCESS, TRANSLATE_SIMPLE_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction* translateSimple(action) {\n  // const result = yield call(translateSimpleAPI, action.data);\n  yield delay(100);\n\n  try {\n    console.log('done');\n    console.log(action.data);\n    yield put({\n      type: TRANSLATE_SIMPLE_SUCCESS,\n      Output: faker.lorem.paragraphs() + faker.lorem.paragraphs(),\n      Input: action.data,\n      id: faker.random.number()\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: TRANSLATE_SIMPLE_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchTranslateSimple() {\n  yield takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n}\n\nfunction loginAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.id);\n  yield delay(100);\n\n  try {\n    console.log('done');\n    console.log(action.id);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.id\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchlogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* translateSaga() {\n  console.log('watch Saga');\n  yield all([fork(watchTranslateSimple), fork(watchlogin)]);\n}","map":{"version":3,"sources":["/Users/hyesong/Documents/react/react-bird/translatePorject/saga/translate.js"],"names":["all","takeLatest","fork","put","delay","call","faker","fake","TRANSLATE_SIMPLE_REQUEST","TRANSLATE_SIMPLE_SUCCESS","TRANSLATE_SIMPLE_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","translateSimpleAPI","data","axios","post","translateSimple","action","console","log","type","Output","lorem","paragraphs","Input","id","random","number","error","response","watchTranslateSimple","loginAPI","login","watchlogin","translateSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,aANF,QAOO,uBAPP;;AASA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,SAAOC,KAAK,CAACC,IAAN,CAAW,SAAX,EAAsBF,IAAtB,CAAP;AACD;;AAED,UAAUG,eAAV,CAA0BC,MAA1B,EAAkC;AAChC;AACA,QAAMf,KAAK,CAAC,GAAD,CAAX;;AACA,MAAI;AACFgB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACJ,IAAnB;AACA,UAAMZ,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,wBADE;AAERc,MAAAA,MAAM,EAAEjB,KAAK,CAACkB,KAAN,CAAYC,UAAZ,KAA2BnB,KAAK,CAACkB,KAAN,CAAYC,UAAZ,EAF3B;AAGRC,MAAAA,KAAK,EAAEP,MAAM,CAACJ,IAHN;AAIRY,MAAAA,EAAE,EAAErB,KAAK,CAACsB,MAAN,CAAaC,MAAb;AAJI,KAAD,CAAT;AAMD,GATD,CASE,OAAOC,KAAP,EAAc;AACdV,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEZ,wBADE;AAERoB,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAehB;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUiB,oBAAV,GAAiC;AAC/B,QAAM/B,UAAU,CAACO,wBAAD,EAA2BU,eAA3B,CAAhB;AACD;;AACD,SAASe,QAAT,CAAkBlB,IAAlB,EAAwB;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,QAAX,EAAqBF,IAArB,CAAP;AACD;;AAED,UAAUmB,KAAV,CAAgBf,MAAhB,EAAwB;AACtB;AACA,QAAMf,KAAK,CAAC,GAAD,CAAX;;AACA,MAAI;AACFgB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACQ,EAAnB;AACA,UAAMxB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEV,aADE;AAERG,MAAAA,IAAI,EAAEI,MAAM,CAACQ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOG,KAAP,EAAc;AACdV,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAET,aADE;AAERiB,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAehB;AAFd,KAAD,CAAT;AAID;AACF;;AAED,UAAUoB,UAAV,GAAuB;AACrB,QAAMlC,UAAU,CAACU,aAAD,EAAgBuB,KAAhB,CAAhB;AACD;;AAED,eAAe,UAAUE,aAAV,GAA0B;AACvChB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMrB,GAAG,CAAC,CAACE,IAAI,CAAC8B,oBAAD,CAAL,EAA6B9B,IAAI,CAACiC,UAAD,CAAjC,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport {\n  TRANSLATE_SIMPLE_REQUEST,\n  TRANSLATE_SIMPLE_SUCCESS,\n  TRANSLATE_SIMPLE_FAILURE,\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n} from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction* translateSimple(action) {\n  // const result = yield call(translateSimpleAPI, action.data);\n  yield delay(100);\n  try {\n    console.log('done');\n    console.log(action.data);\n    yield put({\n      type: TRANSLATE_SIMPLE_SUCCESS,\n      Output: faker.lorem.paragraphs() + faker.lorem.paragraphs(),\n      Input: action.data,\n      id: faker.random.number(),\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: TRANSLATE_SIMPLE_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchTranslateSimple() {\n  yield takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n}\nfunction loginAPI(data) {\n  return axios.post('/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.id);\n  yield delay(100);\n  try {\n    console.log('done');\n    console.log(action.id);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.id,\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: LOGIN_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchlogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* translateSaga() {\n  console.log('watch Saga');\n  yield all([fork(watchTranslateSimple), fork(watchlogin)]);\n}\n"]},"metadata":{},"sourceType":"module"}