{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(translateSimple),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchTranslateSimple),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(translateSaga);\n\nimport { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport { TRANSLATE_SIMPLE_REQUEST, TRANSLATE_SIMPLE_SUCCESS, TRANSLATE_SIMPLE_FAILURE } from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction translateSimple(action) {\n  return _regeneratorRuntime.wrap(function translateSimple$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return delay(100);\n\n        case 2:\n          _context.prev = 2;\n          console.log('done');\n          console.log(action.data);\n          _context.next = 7;\n          return put({\n            type: TRANSLATE_SIMPLE_SUCCESS,\n            Output: faker.lorem.words(),\n            Input: action.data,\n            id: faker.random.number()\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](2);\n          console.log('fails');\n          _context.next = 14;\n          return put({\n            type: TRANSLATE_SIMPLE_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 9]]);\n}\n\nfunction watchTranslateSimple() {\n  return _regeneratorRuntime.wrap(function watchTranslateSimple$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function translateSaga() {\n  return _regeneratorRuntime.wrap(function translateSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('watch Saga');\n          _context3.next = 3;\n          return all([fork(watchTranslateSimple)]);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/hyesong/Documents/react/react-bird/translatePorject/saga/translate.js"],"names":["translateSimple","watchTranslateSimple","translateSaga","all","takeLatest","fork","put","delay","call","faker","fake","TRANSLATE_SIMPLE_REQUEST","TRANSLATE_SIMPLE_SUCCESS","TRANSLATE_SIMPLE_FAILURE","translateSimpleAPI","data","axios","post","action","console","log","type","Output","lorem","words","Input","id","random","number","error","response"],"mappings":";;oDAYUA,e;qDAqBAC,oB;qDAIeC,a;;AArCzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,wBAHF,QAIO,uBAJP;;AAMA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,SAAOC,KAAK,CAACC,IAAN,CAAW,SAAX,EAAsBF,IAAtB,CAAP;AACD;;AAED,SAAUf,eAAV,CAA0BkB,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,iBAAMX,KAAK,CAAC,GAAD,CAAX;;AAFF;AAAA;AAIIY,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACH,IAAnB;AALJ;AAMI,iBAAMT,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAET,wBADE;AAERU,YAAAA,MAAM,EAAEb,KAAK,CAACc,KAAN,CAAYC,KAAZ,EAFA;AAGRC,YAAAA,KAAK,EAAEP,MAAM,CAACH,IAHN;AAIRW,YAAAA,EAAE,EAAEjB,KAAK,CAACkB,MAAN,CAAaC,MAAb;AAJI,WAAD,CAAT;;AANJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaIT,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAbJ;AAcI,iBAAMd,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAER,wBADE;AAERgB,YAAAA,KAAK,EAAE,YAAMC,QAAN,CAAef;AAFd,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAUd,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACO,wBAAD,EAA2BX,eAA3B,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,aAAV;AAAA;AAAA;AAAA;AAAA;AACbiB,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AADa;AAEb,iBAAMjB,GAAG,CAAC,CAACE,IAAI,CAACJ,oBAAD,CAAL,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\nimport faker, { fake } from 'faker';\nimport {\n  TRANSLATE_SIMPLE_REQUEST,\n  TRANSLATE_SIMPLE_SUCCESS,\n  TRANSLATE_SIMPLE_FAILURE,\n} from '../reducers/translate';\n\nfunction translateSimpleAPI(data) {\n  return axios.post('/simple', data);\n}\n\nfunction* translateSimple(action) {\n  // const result = yield call(translateSimpleAPI, action.data);\n  yield delay(100);\n  try {\n    console.log('done');\n    console.log(action.data);\n    yield put({\n      type: TRANSLATE_SIMPLE_SUCCESS,\n      Output: faker.lorem.words(),\n      Input: action.data,\n      id: faker.random.number(),\n    });\n  } catch (error) {\n    console.log('fails');\n    yield put({\n      type: TRANSLATE_SIMPLE_FAILURE,\n      error: error.response.data,\n    });\n  }\n}\n\nfunction* watchTranslateSimple() {\n  yield takeLatest(TRANSLATE_SIMPLE_REQUEST, translateSimple);\n}\n\nexport default function* translateSaga() {\n  console.log('watch Saga');\n  yield all([fork(watchTranslateSimple)]);\n}\n"]},"metadata":{},"sourceType":"module"}